// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "git.garena.com/sea-labs-id/batch-02/aulia-nabil/assignment-05-golang-backend/internal/dto"
	mock "github.com/stretchr/testify/mock"

	model "git.garena.com/sea-labs-id/batch-02/aulia-nabil/assignment-05-golang-backend/internal/model"
)

// WalletService is an autogenerated mock type for the WalletService type
type WalletService struct {
	mock.Mock
}

// CreateWallet provides a mock function with given fields: input
func (_m *WalletService) CreateWallet(input *dto.WalletRequestBody) (*model.Wallet, error) {
	ret := _m.Called(input)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(*dto.WalletRequestBody) *model.Wallet); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.WalletRequestBody) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletByUserId provides a mock function with given fields: input
func (_m *WalletService) GetWalletByUserId(input *dto.WalletRequestBody) (*model.Wallet, error) {
	ret := _m.Called(input)

	var r0 *model.Wallet
	if rf, ok := ret.Get(0).(func(*dto.WalletRequestBody) *model.Wallet); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.WalletRequestBody) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWalletService interface {
	mock.TestingT
	Cleanup(func())
}

// NewWalletService creates a new instance of WalletService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWalletService(t mockConstructorTestingTNewWalletService) *WalletService {
	mock := &WalletService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
